package ${packageName}.controller;

import com.huc.common.annotation.Log;
import com.huc.common.core.controller.BaseController;
import com.huc.common.core.domain.AjaxResult;
import com.huc.common.enums.BusinessType;
import com.huc.common.utils.poi.ExcelUtil;
import ${packageName}.vo.${ClassName}Vo;
import ${packageName}.service.I${ClassName}Service;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
#if($table.crud || $table.sub)
import com.huc.common.core.page.TableDataInfo;
#elseif($table.tree)
#end

import javax.servlet.http.HttpServletResponse;
import java.util.Arrays;
import java.util.List;

/**
 * ${functionName}Controller
 *
 * @author ${author}
 * @date ${datetime}
 */
@Api(tags = "${functionName}Controller")
@RestController
@RequestMapping("/${moduleName}/${businessName}")
@RequiredArgsConstructor(onConstructor_ = @Autowired)
public class ${ClassName}Controller extends BaseController {

    private final I${ClassName}Service ${className}Service;

    @ApiOperation("查询${functionName}列表")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:list')")
    @GetMapping("/list")
#if($table.crud || $table.sub)
    public TableDataInfo<${ClassName}Vo> list(${ClassName}Vo entity) {
        return ${className}Service.queryList(entity);
    }
#elseif($table.tree)
    public AjaxResult list(${ClassName}Vo entity) {
        return AjaxResult.success("查询成功", ${className}Service.queryAll(entity));
    }
#end

    @ApiOperation("查询${functionName}所有列表")
    @GetMapping("/listAll")
    public AjaxResult listAll(${ClassName}Vo entity) {
        return AjaxResult.success("查询成功", ${className}Service.queryAll(entity));
    }

    @ApiOperation("导出${functionName}列表")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:export')")
    @Log(title = "${functionName}", businessType = BusinessType.EXPORT)
    @PostMapping("/export")
    public void export(HttpServletResponse response, ${ClassName}Vo entity) {
        List<${ClassName}Vo> list = ${className}Service.queryAll(entity);
        ExcelUtil<${ClassName}Vo> util = new ExcelUtil<>(${ClassName}Vo.class);
        util.exportExcel(response, list, "${functionName}数据");
    }

    @ApiOperation("获取${functionName}详细信息")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:query')")
    @GetMapping(value = "/getInfo/{${pkColumn.javaField}}")
    public AjaxResult getInfo(@PathVariable("${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField}) {
        return AjaxResult.success("查询成功", ${className}Service.queryById(${pkColumn.javaField}));
    }

    @ApiOperation("新增${functionName}")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:add')")
    @Log(title = "${functionName}", businessType = BusinessType.INSERT)
    @PostMapping("add")
    public AjaxResult add(@RequestBody ${ClassName}Vo entity) {
        return toAjax(${className}Service.save(entity));
    }

    @ApiOperation("修改${functionName}")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:edit')")
    @Log(title = "${functionName}", businessType = BusinessType.UPDATE)
    @PostMapping("edit")
    public AjaxResult edit(@RequestBody ${ClassName}Vo entity) {
        return toAjax(${className}Service.updateById(entity));
    }

    @ApiOperation("删除${functionName}")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:remove')")
    @Log(title = "${functionName}", businessType = BusinessType.DELETE)
	@GetMapping("/remove/{${pkColumn.javaField}s}")
    public AjaxResult remove(@PathVariable ${pkColumn.javaType}[] ${pkColumn.javaField}s) {
        return toAjax(${className}Service.removeByIds(Arrays.asList(ids)) ? 1 : 0);
    }
}
